{"version":3,"sources":["Component/Button.js","Component/Input.js","Component/ClearButton.js","App.js","index.js"],"names":["Button","props","className","val","children","isNaN","onClick","handleClick","Input","input","ClearButton","handleClear","App","addToInput","setState","state","handleEqual","math","handlepercent","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAOaA,G,YAAS,SAAAC,GAAK,OACzB,yBACEC,UAAS,0BANMC,EAOFF,EAAMG,SANbC,MAAMF,IAAgB,MAARA,GAAuB,MAARA,EAMG,WAAP,OAE/BG,QAAS,kBAAML,EAAMM,YAAYN,EAAMG,YAEtCH,EAAMG,UAXQ,IAAAD,ICANK,G,MAAQ,SAAAP,GAAK,OAAI,yBAAKC,UAAU,SAASD,EAAMQ,SCC/CC,G,MAAc,SAAAT,GAAK,OAC9B,yBAAKC,UAAU,YAAYI,QAASL,EAAMU,aACvCV,EAAMG,Y,QC+DIQ,E,kDA7Db,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAORY,WAAa,SAAAV,GACX,EAAKW,SAAS,CAAEL,MAAO,EAAKM,MAAMN,MAAQN,KATzB,EAYnBa,YAAc,WACZ,EAAKF,SAAS,CAAEL,MAAOQ,IAAc,EAAKF,MAAMN,UAb/B,EAgBnBS,cAAgB,SAACf,GACf,EAAKW,SAAS,CAAEL,MAAOQ,IAAc,EAAKF,MAAMN,MAAS,QAdzD,EAAKM,MAAQ,CACXN,MAAO,IAJQ,E,qDAoBT,IAAD,OACP,OACE,yBAAKP,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAOO,MAAOU,KAAKJ,MAAMN,QACzB,yBAAKP,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,MAEF,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,MAEF,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,MAEF,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAQK,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAaY,KAAKN,YAA1B,KACA,kBAAC,EAAD,CAAQN,YAAa,kBAAM,EAAKS,gBAAhC,KACA,kBAAC,EAAD,CAAQT,YAAa,kBAAM,EAAKW,kBAAhC,KACA,kBAAC,EAAD,CAAQX,YAAaY,KAAKN,YAA1B,MAEF,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAaS,YAAa,kBAAM,EAAKG,SAAS,CAAEL,MAAO,OAAvD,gB,GApDMW,aCFlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.9e00591d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\nconst isOperator = val => {\n  return !isNaN(val) || val === \".\" || val === \"=\";\n};\n\nexport const Button = props => (\n  <div\n    className={`button-wrapper ${\n      isOperator(props.children) ? null : \"operator\"\n    }`}\n    onClick={() => props.handleClick(props.children)}\n  >\n    {props.children}\n  </div>\n);","import React from \"react\";\nimport \"./Input.css\";\n\nexport const Input = props => <div className=\"input\">{props.input}</div>;","  \nimport React from \"react\";\nimport \"./ClearButton.css\";\n\nexport const ClearButton = props => (\n  <div className=\"clear-btn\" onClick={props.handleClear}>\n    {props.children}\n  </div>\n);","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"./Component/Button\";\nimport { Input } from \"./Component/Input\";\nimport { ClearButton } from \"./Component/ClearButton\";\nimport * as math from \"mathjs\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: \"\"\n    };\n  }\n\n  addToInput = val => {\n    this.setState({ input: this.state.input + val });\n  };\n\n  handleEqual = () => {\n    this.setState({ input: math.evaluate(this.state.input) });\n  };\n\n  handlepercent = (val) => {\n    this.setState({ input: math.evaluate(this.state.input  / 100) });\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"calc-wrapper\">\n          <Input input={this.state.input} />\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>7</Button>\n            <Button handleClick={this.addToInput}>8</Button>\n            <Button handleClick={this.addToInput}>9</Button>\n            <Button handleClick={this.addToInput}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>4</Button>\n            <Button handleClick={this.addToInput}>5</Button>\n            <Button handleClick={this.addToInput}>6</Button>\n            <Button handleClick={this.addToInput}>*</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>1</Button>\n            <Button handleClick={this.addToInput}>2</Button>\n            <Button handleClick={this.addToInput}>3</Button>\n            <Button handleClick={this.addToInput}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addToInput}>.</Button>\n            <Button handleClick={this.addToInput}>0</Button>\n            <Button handleClick={() => this.handleEqual()}>=</Button>\n            <Button handleClick={() => this.handlepercent()}>%</Button>\n            <Button handleClick={this.addToInput}>-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClear={() => this.setState({ input: \"\" })}>\n              Clear\n            </ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n/* import React from 'react';\nimport './App.css';\nimport CalculatorResult from './Component/CalculatorResult';\nimport CalculatorKeys from './Component/CalculatorKeys';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n\n    this.state = {\n        result: 0\n    }\n}\n\nonClick = button => {\n\n    if(button === \"=\"){\n        this.calculate()\n    }\n    else if(button === \"(\" ){\n      this.parenthesis()\n  }\n\n    else if(button === \"C\"){\n        this.reset()\n    }\n    else if(button === \"CE\"){\n        this.backspace()\n    }\n\n    else {\n        this.setState({\n            result: this.state.result + button\n        })\n    }\n};\n\n\ncalculate = () => {\n    var checkResult = ''\n    if(this.state.result.includes('--')){\n        checkResult = this.state.result.replace('--','+')\n        \n    }\n\n    else {\n        checkResult = this.state.result\n    }\n\n    try {\n        this.setState({\n            // eslint-disable-next-line\n            result: (eval(checkResult) || \"\" ) + \"\"\n        })\n    } catch (e) {\n        this.setState({\n            result: \"error\"\n        })\n\n    }\n};\n\nreset = () => {\n    this.setState({\n        result: 0\n    })\n};\n\nbackspace = () => {\n    this.setState({\n        result: this.state.result.slice(0, -1)\n    })\n};\n\nparenthesis =()=>{\n  this.setState({\n    result: this.state.result.concat('*(')\n  })\n};\n\nrender() {\n    return (\n        <div>\n            <div className=\"calculator-body\">\n                <h1>Simple Calculator</h1>\n                    <CalculatorResult result={this.state.result}/>\n                    <CalculatorKeys onClick={this.onClick}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n */","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n\n"],"sourceRoot":""}